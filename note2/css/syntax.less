//less中的单行注释，注释中的内容不会被解析到css中

/*
css中的注释，多行注释
这个注释会被解析到css文件中
*/


body{
    background-color: rgb(181, 163, 219);
}
.box1{
    background-color: aquamarine;
    .box2{
        background-color: black;
        .box3{
            background-color: blueviolet;
        }
    }
    .box4{
        background-color: red;
    }
}


//变量，在变量中可以存储一个任意的值
//并且可以在需要时任意修改变量的值
//变量语法：@变量名
@a:100px;
@b:#bfa;
.box5{
    //在使用变量时，如果是直接使用，则以 @变量名 的形式使用即可
    width: @a;
    color:@b;
}

//作为类名或者一部分值使用时必须以 @{变量名} 的形式使用
@c:box6;  //注意，变量也可以是一个类名，但在引用的时候要加上{}
.@{c}{
    width: @a;
    background-image: url("@{c}/1.jpg");
}


//注意，当给一个变量赋了多个值时，应该遵从就近原则，选取最后赋的那个值
//可以在变量声明前就使用这个变量，但不建议这么用
div{
    width: @d;
}
@d:200px;
@d:400px;
div{
    @d:115px;   //相当于是一个局部变量
    width: @d;
}
p{
    width: @d;
}

//可以使用$符号来引用属性值
div{
    width: 100px;
    height: $width;
}


.box7{
    .box8{     //后代元素选择器
        color: #bfa;
    }
    >.box9{     //子元素选择器
        color: #bfa;
    }
    //父元素选择器&，表示外层的父元素
    &:hover{
        color: #bfa;
    }
    div &::after{
        content: "";
    }
}


//扩展
//方法一：:extend()，对当前选择器扩展指定选择器的样式（选择器分组）
.p1{
    width: 100px;
    height: 100px;
}
.p2:extend(.p1){color:red;}
//方法二：直接对指定的样式进行引用，相当于将p1的样式混合在p3中
.p3{
    .p1();
}

//使用类选择器时，可以在选择器后添加一个括号，这时我们实际上就创建了一个混合函数mixins
.p4(){
    width: 200px;
}
.p5{
    .p4();
}

//混合函数  在混合函数中可以直接设置变量
.test(@w:100px,@u,@bg-color){
    width: @w;
    height: @u;
    border: 1px solid @bg-color;
}
div{
    //这里必须写上参数，混合函数按顺序传递参数
    .test(2000px,56px,red);   
    //也可以这么传递：
    .test(@bg-color:red;@w:2000px;@u:56px);
}

//调用库函数
span{
    color: average(yellow,red);  //average对颜色起作用
}
span:hover{
    color: darken(rgb(0, 255, 145),20%);  //darken用于颜色的加深
}